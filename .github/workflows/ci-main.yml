---
name: CI (main)

on:
  push:
    branches:
      - main
      - 'bugfix/**'
      - 'feature/**'

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  unit_tests:
    name: Unit tests
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Cache node_modules
        id: yarn-cache
        uses: actions/cache@v2.1.3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Compile
        if: ${{ steps.yarn-cache.outputs.cache-hit != 'true' }}
        run: yarn install
      - name: Lint
        run: yarn run lint
      - name: Snyk authenticate
        run: yarn run security:auth ${{ secrets.SNYK_API_TOKEN }}
      - name: Unit tests
        run: yarn run test
        if: startsWith(github.ref, 'refs/heads/bugfix/') || startsWith(github.ref, 'refs/heads/feature/')
      - name: Unit tests with coverage
        uses: paambaati/codeclimate-action@v2.7.4
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageCommand: yarn run test
          debug: true
  functional_tests:
    name: Functional tests
    timeout-minutes: 5
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        version: ['0.3.0']
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.ref }}
      - name: Cache node_modules
        id: yarn-cache
        uses: actions/cache@v2.1.3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Compile
        if: ${{ steps.yarn-cache.outputs.cache-hit != 'true' }}
        run: yarn install
      - name: Build
        run: yarn run build
      - name: Install {PROJECT_TITLE}
        uses: ./
        with:
          version: ${{ matrix.version }}
      - name: Run script (Linux, MacOS)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: {PROJECT_CLI} ./{PROJECT_SCRIPT_FILE}
      - name: Run script (Windows)
        if: matrix.os == 'windows-latest'
        run: {PROJECT_CLI}-${{ matrix.version }}.exe ./{PROJECT_SCRIPT_FILE}
